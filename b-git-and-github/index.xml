




	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git and GitHub on K-State CIS 400 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/index.html</link>
    <description>Recent content in Git and GitHub on K-State CIS 400 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Aug 2018 10:53:05 -0500</lastBuildDate><atom:link href="https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/01-introduction/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/01-introduction/index.html</guid>
      <description>Code version control is a staple of modern software development. So it&amp;rsquo;s a good idea to learn and practice it now, so it becomes a core element of your software development practice. This appendix covers one of the most popular distributed version control software in use today - Git. It also covers one of the most popular online platforms for hosting remote Git repositories - GitHub. (Hint: Despite the tendency for many programmers to use the names interchangeably, they aren&amp;rsquo;t the same thing!</description>
    </item>
    <item>
      <title>Version Control Software</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/02-version-control/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/02-version-control/index.html</guid>
      <description>Have you ever been working on a paper for a class, and stopped every now and then to save it under a slightly different name, i.e. &amp;ldquo;Paper draft 1.docx&amp;rdquo;, &amp;ldquo;Paper draft 2.docx&amp;rdquo;, &amp;ldquo;Paper final draft.docx&amp;rdquo;, &amp;ldquo;Paper final draft with Merge suggestions.docx&amp;rdquo;, and so on?
Effectively what you were doing was version control - keeping old copies of a project around. This can be a lifesaver if your current file gets corrupted and becomes unusable.</description>
    </item>
    <item>
      <title>Git</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/03-git/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/03-git/index.html</guid>
      <description>Git is one of the many version control programs that has been developed to tackle these challenges, and is currently one of the most popular. In part, this is because it does a very good job at tackling each of those issues we just discussed. Of course, it can only do this if you are using it as it was intended to be used&amp;hellip; so it&amp;rsquo;s a good idea to spend a bit of time learning those details (though, as the authors of xkcd suggest, many people don&amp;rsquo;t):</description>
    </item>
    <item>
      <title>Git Initialization</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/04-initialization/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/04-initialization/index.html</guid>
      <description>YouTube Video Git converts an ordinary directory (folder) on our computer into a git repository, allowing you to save different versions of the directory&amp;rsquo;s contents as you make changes to that directory. Invoking the git init command within the top directory of your project starts this process:
$ git init The data describing these changes and how to switch to them is stored in a subdirectory the Git client creates in the top project directory named .</description>
    </item>
    <item>
      <title>Staging and Committing</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/05-staging-and-committing/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/05-staging-and-committing/index.html</guid>
      <description>YouTube Video It is important to understand that Git doesn&amp;rsquo;t save the changes to every file in the directory when you create a commit - it only saves those files you have staged to be committed. This extra step often confuses new Git users, but it exists to give you full control over what gets committed into your repository.
It may help to understand how Git thinks about files. Files in your repository directory fall into one of five categories - untracked, unstaged, staged, committed, and ignored.</description>
    </item>
    <item>
      <title>Ignoring Files</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/06-ignoring/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/06-ignoring/index.html</guid>
      <description>YouTube Video Typically there are some files in a project that we never want to commit. For example, compilers often create temporary or intermediate files during the compilation process, and these will be recreated every time we re-compile. We also usually don&amp;rsquo;t want to commit the compiled binary files either, as we can always compile our code to get a fresh copy. Not saving these files means our repository takes up less memory, and Git operations are faster.</description>
    </item>
    <item>
      <title>Reverting Changes</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/07-reverting/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/07-reverting/index.html</guid>
      <description>As we suggested earlier in the chapter, one of the most important uses of a version control system is to allow you to revert to an earlier version of your code. To ask Git to list the available commits, you can use the git log command:
$ git logThis should print a list of the commits and their details, with the newest commit first:
Notice each commit is identified by a hash, date, and commit message.</description>
    </item>
    <item>
      <title>Branches</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/08-branches/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/08-branches/index.html</guid>
      <description>YouTube Video Branches are a powerful mechanisms for working on different versions of your code. The name &amp;ldquo;branch&amp;rdquo; is derived from visualizing a repository as a tree structure, with each commit being a node in the tree. For a simple repository, this tree structure is pretty boring - just a straight line as each node has only one child:
This default branch was historically named &amp;ldquo;master&amp;rdquo;, though recent practice has shifted to using the term &amp;ldquo;main&amp;rdquo;.</description>
    </item>
    <item>
      <title>Remote Repositories</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/09-remote-repositories/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/09-remote-repositories/index.html</guid>
      <description>YouTube Video Git bills itself as a distributed version control system. This means it has no central server. Instead, we can create copies of the repository we call remote repositories with the git clone command. These copies can be placed anywhere - in another directory on your computer, or on a different computer on your network, or a computer accessed via the internet.
GitHub is a web service that specifically hosts remote git repositories and allows you to access them through both your git client and through a web (HTML/CSS/JS) interface.</description>
    </item>
    <item>
      <title>Feature Branches</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/10-feature-branches/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/10-feature-branches/index.html</guid>
      <description>This section summarizes the git commands you will need when creating feature branches for your semester-long project.
1. Create and check out a local branch for the current milestone When you start a new milestone, you need to create a local branch to hold your work. For example, if you wanted to create a feature branch for Milestone 0, you would do:
$ git branch ms0Next, check out your new branch.</description>
    </item>
    <item>
      <title>Merge Conflicts</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/11-merge-conflicts/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/11-merge-conflicts/index.html</guid>
      <description>YouTube Video When git merges commits from two different branches or remote repositories, it applies the committed changes from both. In many cases, this works seamlessly, but sometimes it results in merge conflicts. A conflict occurs when the same line(s) in a file were changed in both branches, and git is unsure of which to use.
Git will do several things in this scenario:
It will report as output from that command that caused the conflict which file(s) in the repository contain conflicts, and</description>
    </item>
    <item>
      <title>Create a Release</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/12-release/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/12-release/index.html</guid>
      <description>When you are ready to turn in an assignment, you will need to create a release tag. A tag is nothing more than a specially named commit, and a release is a special tag created on GitHub to mark a specific version of the software.
Step 1 - Make sure All your code is on GitHub Since releases are created on GitHub, it is important to make sure you&amp;rsquo;ve committed your changes and have pushed them to GitHub before you create the release.</description>
    </item>
    <item>
      <title>Adding Documentation Files</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/13-adding-documentation-files/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/b-git-and-github/13-adding-documentation-files/index.html</guid>
      <description>When adding existing documentation files (i.e. UML documents) to your project, you may think adding them through Visual Studio&amp;rsquo;s Solution Explorer would be the way to go. However, this can lead to an unexpected issue. Look closely at the example below:
We can see the PDF has been added to the solution file in the Solution Explorer, and we can see its raw data open in the editing pane. But take a close look at the Properties.</description>
    </item>
  </channel>
</rss>