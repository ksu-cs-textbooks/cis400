




	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learning Programming on K-State CIS 400 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cis400/a-learning-programming/index.html</link>
    <description>Recent content in Learning Programming on K-State CIS 400 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Aug 2018 10:53:05 -0500</lastBuildDate><atom:link href="https://ksu-cs-textbooks.github.io/cis400/a-learning-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/a-learning-programming/01-introduction/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/a-learning-programming/01-introduction/index.html</guid>
      <description>You may not have given much thought to how you are learning to program. Very likely, you&amp;rsquo;ve just been engrossed in doing so. But understanding the learning process can help you improve how quickly, and how well you learn. As we tackle the subject of object-oriented programming, it will greatly benefit you to have a better grasp of exactly what&amp;rsquo;s going on upstairs. Especially as we embark on our first semester-long programming project.</description>
    </item>
    <item>
      <title>Natural Born Programmers</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/a-learning-programming/02-natural-born-programmers/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/a-learning-programming/02-natural-born-programmers/index.html</guid>
      <description>There is a prevalent myth that some people are &amp;ldquo;natural born programmers&amp;rdquo; to whom programming comes easily. This is a dangerous idea, because of its corollary - the idea that &amp;ldquo;some people simply aren&amp;rsquo;t able to learn programming.&amp;rdquo; If you embrace these related ideas, you will find yourself wondering to which set you actually belong.
The truth is that in learning to program, we are learning to solve problems in a way that can be performed by a computing machine.</description>
    </item>
    <item>
      <title>Mindsets</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/a-learning-programming/03-mindsets/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/a-learning-programming/03-mindsets/index.html</guid>
      <description>Carol Dweck is a researcher who has been developing a theory on &amp;ldquo;Mindsets.&amp;rdquo; She describes her research in the following Ted Talk:</description>
    </item>
    <item>
      <title>The New Science of Learning</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/a-learning-programming/04-the-new-science-of-learing/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/a-learning-programming/04-the-new-science-of-learing/index.html</guid>
      <description>Terry Doyle and Todd Zakrajsek explore the implications of mindsets and other understandings of the learning process emerging from cognitive science in their book The New Science of Learning: How to Learn in Harmony with your Brain , which they specifically wrote for college-age learners. I would encourage you to read this book. But I&amp;rsquo;ll offer a brief summary here:
Sleep Perhaps the most impactful thing you can do to improve your learning is to get high-quality sleep.</description>
    </item>
    <item>
      <title>Jean Piaget</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/a-learning-programming/05-piaget/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/a-learning-programming/05-piaget/index.html</guid>
      <description>Jean Piaget was a biologist and psychologist who performed some of the earliest studies on knowledge acquisition in children. His work is the foundation of Constructivism , one of the more influential philosophies of education.
Genetic Epistemology Of especial interest to us is his theory of genetic epistemology. Epistemology is the study of human knowledge, and genetic in this sense refers to origins i.e. the genesis, so his theory concerns how knowledge is created by humans.</description>
    </item>
    <item>
      <title>Developmental Epistemology of Computer Programming</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/a-learning-programming/06-developmental-epistemology/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/a-learning-programming/06-developmental-epistemology/index.html</guid>
      <description>Among these neo-Piagetian researchers is a group including Raymond Lister and Donna M. Teague whom applied these theories to the learning of computer science, formulating a theory Lister calls The Developmental Epistemology of Computer Programming. This theory describes the traits of programmers at each of the stages of development. In particular, they use a student&amp;rsquo;s ability to trace code (explain line-by-line what it does) as a demarcation between stages.
Stage Traits Sensorimotor Cannot trace code with &gt;= 50% accuracy Dominant problem-solving strategy is trial and error Preoperational Can trace code with &gt;= 50% accuracy Traces without abstracting any meaning from the code Cannot see relationships between lines of code Struggles to make effective use of diagrammatic abstractions of code Dominant problem-solving strategy is quasi-random code changes and copious trial runs Concrete Operational Dominant problem-solving strategy is hasty design, futile patching Can establish purpose of code by working backwards from execution results Tends to reduce levels of abstraction to make concepts more understandable Formal Operational Uses hypothetico-deductive reasoning Reads code rather than traces to deduce purpose These stages reflect the progress the learner is making through accommodation, creating the mental structures needed to reason about programming.</description>
    </item>
    <item>
      <title>Summary</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/a-learning-programming/07-summary/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/a-learning-programming/07-summary/index.html</guid>
      <description>So what does all of this mean in the context of your learning?
Developing into an expert programmer is going to take hard work It will require a lot of writing and reading code There is no shortcut in this learning process, because you must create disequilibrium in your brain in order for the necessary cognitive structures to form through the process of accommodation This process can be very frustrating You can do this, just as many students before you have What can you do to improve your learning process?</description>
    </item>
  </channel>
</rss>