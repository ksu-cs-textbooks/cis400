<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Developmental Epistemology of Computer Programming :: K-State CIS 400 Textbook</title><link>https://textbooks.cs.ksu.edu/cis400/a-learning-programming/06-developmental-epistemology/</link><description>Among these neo-Piagetian researchers is a group including Raymond Lister and Donna M. Teague whom applied these theories to the learning of computer science, formulating a theory Lister calls The Developmental Epistemology of Computer Programming. This theory describes the traits of programmers at each of the stages of development. In particular, they use a studentâ€™s ability to trace code (explain line-by-line what it does) as a demarcation between stages. Stage Traits Sensorimotor Cannot trace code with >= 50% accuracy Dominant problem-solving strategy is trial and error Preoperational Can trace code with >= 50% accuracy Traces without abstracting any meaning from the code Cannot see relationships between lines of code Struggles to make effective use of diagrammatic abstractions of code Dominant problem-solving strategy is quasi-random code changes and copious trial runs Concrete Operational Dominant problem-solving strategy is hasty design, futile patching Can establish purpose of code by working backwards from execution results Tends to reduce levels of abstraction to make concepts more understandable Formal Operational Uses hypothetico-deductive reasoning Reads code rather than traces to deduce purpose These stages reflect the progress the learner is making through accommodation, creating the mental structures needed to reason about programming.</description><generator>Hugo</generator><language>en-us</language><lastBuildDate/><atom:link href="https://textbooks.cs.ksu.edu/cis400/a-learning-programming/06-developmental-epistemology/index.xml" rel="self" type="application/rss+xml"/></channel></rss>