<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Binding Lists :: K-State CIS 400 Textbook</title><link>https://textbooks.cs.ksu.edu/cis400/2-desktop-development/04-data-binding/04-binding-lists/</link><description>For list controls, i.e. ListView and ListBox, the appropriate binding is a collection implementing IEnumerable, and we bind it to the ItemsSource property. Let’s say we want to create a directory that displays information for a List&lt;Person>. We might write a custom DirectoryControl like:
&lt;UserControl x:Class="DataBindingExample.DirectoryControl" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:local="clr-namespace:DataBindingExample" mc:Ignorable="d" d:DesignHeight="450" d:DesignWidth="800"> &lt;Grid> &lt;ListBox ItemsSource="{Binding}"/> &lt;/Grid> &lt;/UserControl>Notice that we didn’t supply a Path with our binding. In this case, we’ll be binding directly to the DataContext, which is a list of People objects drawn from the 1996 classic “Space Jam”, i.</description><generator>Hugo</generator><language>en-us</language><lastBuildDate/><atom:link href="https://textbooks.cs.ksu.edu/cis400/2-desktop-development/04-data-binding/04-binding-lists/index.xml" rel="self" type="application/rss+xml"/></channel></rss>