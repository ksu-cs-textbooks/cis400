




	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Binding on K-State CIS 400 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/04-data-binding/index.html</link>
    <description>Recent content in Data Binding on K-State CIS 400 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Aug 2018 10:53:05 -0500</lastBuildDate><atom:link href="https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/04-data-binding/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/04-data-binding/01-introduction/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/04-data-binding/01-introduction/index.html</guid>
      <description>The term data binding refers to binding two objects together programmatically so that one has access to the data of the other. We most commonly see this with user interfaces and data objects - the user interface exposes some of the state of the data object to the user. As with many programming tasks, there are a number of ways to approach data binding. The Windows Presentation Foundation in C# has adopted an event and component-based approach that we will explore in this chapter.</description>
    </item>
    <item>
      <title>Data Binding</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/04-data-binding/02-data-binding/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/04-data-binding/02-data-binding/index.html</guid>
      <description>Data binding is a technique for synchronizing data between a provider and consumer, so that any time the data changes, the change is reflected in the bound elements. This strategy is commonly employed in graphical user interfaces (GUIs) to bind controls to data objects. Both Windows Forms and Windows Presentation Foundation employ data binding.
In WPF, the data object is essentially a normal C# object, which represents some data we want to display in a control.</description>
    </item>
    <item>
      <title>The Binding Class</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/04-data-binding/03-the-binding-class/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/04-data-binding/03-the-binding-class/index.html</guid>
      <description>In Windows Presentation Foundation, data binding is accomplished by a binding object that sits between the binding target (the control) and the binding source (the data object):
It is this Binding object that we are defining the properties of in the XAML attribute with &amp;quot;{Binding}&amp;quot;. Hence, Path is a property defined on this binding.
As we mentioned before, bindings can be OneWay or TwoWay based on the direction the data flows.</description>
    </item>
    <item>
      <title>Binding Lists</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/04-data-binding/04-binding-lists/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/04-data-binding/04-binding-lists/index.html</guid>
      <description>For list controls, i.e. ListView and ListBox, the appropriate binding is a collection implementing IEnumerable, and we bind it to the ItemsSource property. Let&amp;rsquo;s say we want to create a directory that displays information for a List&amp;lt;Person&amp;gt;. We might write a custom DirectoryControl like:
&amp;lt;UserControl x:Class=&amp;#34;DataBindingExample.DirectoryControl&amp;#34; xmlns=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34; xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34; xmlns:mc=&amp;#34;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;#34; xmlns:d=&amp;#34;http://schemas.microsoft.com/expression/blend/2008&amp;#34; xmlns:local=&amp;#34;clr-namespace:DataBindingExample&amp;#34; mc:Ignorable=&amp;#34;d&amp;#34; d:DesignHeight=&amp;#34;450&amp;#34; d:DesignWidth=&amp;#34;800&amp;#34;&amp;gt; &amp;lt;Grid&amp;gt; &amp;lt;ListBox ItemsSource=&amp;#34;{Binding}&amp;#34;/&amp;gt; &amp;lt;/Grid&amp;gt; &amp;lt;/UserControl&amp;gt;Notice that we didn&amp;rsquo;t supply a Path with our binding. In this case, we&amp;rsquo;ll be binding directly to the DataContext, which is a list of People objects drawn from the 1996 classic &amp;ldquo;Space Jam&amp;rdquo;, i.</description>
    </item>
    <item>
      <title>Binding Enumerations</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/04-data-binding/05-binding-enums/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/04-data-binding/05-binding-enums/index.html</guid>
      <description>Now let&amp;rsquo;s delve into a more complex data binding examples - binding enumerations. For this discussion, we&amp;rsquo;ll use a simple enumeration of fruits:
/// &amp;lt;summary&amp;gt; /// Possible fruits /// &amp;lt;/summary&amp;gt; public enum Fruit { Apple, Orange, Peach, Pear }And add a FavoriteFruit property to our Person class:
private Fruit favoriteFruit; /// &amp;lt;summary&amp;gt; /// The person&amp;#39; favorite fruit /// &amp;lt;/summary&amp;gt; public Fruit FavoriteFruit { get { return favoriteFruit; } set { favoriteFruit = value; PropertyChanged?</description>
    </item>
    <item>
      <title>Summary</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/04-data-binding/06-summary/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/04-data-binding/06-summary/index.html</guid>
      <description>In this chapter we explored the concept of data binding and how it is employed in Windows Presentation Foundation. We saw how bound classes need to implement the INotifyPropertyChanged interface for bound properties to automatically synchronize. We saw how the binding is managed by a Binding class instance, and how we can customize its Path, Mode, and Source properties in XAML to modify the binding behavior. We bound simple controls like &amp;lt;TextBlock&amp;gt; and &amp;lt;CheckBox&amp;gt; and more complex elements like &amp;lt;ListView&amp;gt; and &amp;lt;ListBox&amp;gt;.</description>
    </item>
  </channel>
</rss>