<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Exploring Elements :: K-State CIS 400 Textbook</title><link>https://textbooks.cs.ksu.edu/cis400/2-desktop-development/02-element-tree/</link><description>Our application is a tree?</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 27 Feb 2024 09:04:39 -0600</lastBuildDate><atom:link href="https://textbooks.cs.ksu.edu/cis400/2-desktop-development/02-element-tree/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://textbooks.cs.ksu.edu/cis400/2-desktop-development/02-element-tree/01-introduction/</link><pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis400/2-desktop-development/02-element-tree/01-introduction/</guid><description>In the previous chapter, we introduced Windows Presentation Foundation and XAML, and discussed common layouts and controls, as well as some of the most common features of each of them. We also saw the concept of component-based design and explored its use. In this chapter, we’ll take a deeper dive into how WPF and XAML structure GUIs into an elements tree, and some different ways we can leverage these features for greater control and customization in our programs.</description></item><item><title>The Elements Tree</title><link>https://textbooks.cs.ksu.edu/cis400/2-desktop-development/02-element-tree/02-elements-tree/</link><pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis400/2-desktop-development/02-element-tree/02-elements-tree/</guid><description>Consider the ShoppingList class we developed in the last chapter:
&lt;UserControl x:Class="ShopEasy.ShoppingList" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:local="clr-namespace:ShopEasy" mc:Ignorable="d" d:DesignHeight="450" d:DesignWidth="200"> &lt;DockPanel> &lt;TextBlock DockPanel.Dock="Top" FontWeight="Bold" TextAlignment="Center"> Shopping List For: &lt;/TextBlock> &lt;TextBox DockPanel.Dock="Top" FontWeight="Bold" TextAlignment="Center" /> &lt;Button DockPanel.Dock="Bottom" Click="AddItemToList">Add Item To List&lt;/Button> &lt;TextBox Name="itemTextBox" DockPanel.Dock="Bottom"/> &lt;ListView Name="itemsListView" /> &lt;/DockPanel> &lt;/UserControl>Each element in this XAML corresponds to an object of a specific Type, and the nesting of the elements implies a tree-like structure we call the element tree.</description></item><item><title>Navigating the Tree</title><link>https://textbooks.cs.ksu.edu/cis400/2-desktop-development/02-element-tree/03-navigating-the-tree/</link><pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis400/2-desktop-development/02-element-tree/03-navigating-the-tree/</guid><description>When you first learned about trees, you also learned about tree traversal algorithms. This is one reason that WPF is organized into a tree - the rendering process actually uses a tree traversal algorithm to determine how large to make each control!
You can also traverse the tree yourself, by exploring Child, Children, or Parent properties. For example, if we needed to gain access to the ListSwitcher from the ShoppingList in the previous example, you could reach it by invoking:</description></item><item><title>Styling the Tree</title><link>https://textbooks.cs.ksu.edu/cis400/2-desktop-development/02-element-tree/04-styling-the-tree/</link><pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis400/2-desktop-development/02-element-tree/04-styling-the-tree/</guid><description>Windows Presentation Foundation takes advantage of the elements tree in other ways. One of the big ones is for styling related elements. Let’s say we are creating a calculator GUI:
&lt;UserControl x:Class="Calculator.Calculator" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:local="clr-namespace:Calculator" mc:Ignorable="d" d:DesignWidth="450" d:DesignHeight="450"> &lt;Grid> &lt;Grid.ColumnDefinitions> &lt;ColumnDefinition/> &lt;ColumnDefinition/> &lt;ColumnDefinition/> &lt;ColumnDefinition/> &lt;/Grid.ColumnDefinitions> &lt;Grid.RowDefinitions> &lt;RowDefinition/> &lt;RowDefinition/> &lt;RowDefinition/> &lt;RowDefinition/> &lt;RowDefinition/> &lt;/Grid.RowDefinitions> &lt;Button Grid.Column="0" Grid.Row="1">7&lt;/Button> &lt;Button Grid.Column="1" Grid.Row="1">8&lt;/Button> &lt;Button Grid.Column="2" Grid.Row="1">9&lt;/Button> &lt;Button Grid.Column="0" Grid.Row="2">4&lt;/Button> &lt;Button Grid.Column="1" Grid.Row="2">5&lt;/Button> &lt;Button Grid.</description></item><item><title>Resources</title><link>https://textbooks.cs.ksu.edu/cis400/2-desktop-development/02-element-tree/05-resources/</link><pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis400/2-desktop-development/02-element-tree/05-resources/</guid><description>The &lt;Style> element represents just one kind of resource. We can provide other kinds of resources, like raw data. Say we want to provide a string to display in our program, but want that string declared somewhere easy to find and change (perhaps our customers change their mind frequently). We could declare the string in the Application resources:
&lt;Application x:Class="WpfTutorialSamples.App" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:sys="clr-namespace:System;assembly=mscorlib" StartupUri="WPF application/ExtendedResourceSample.xaml"> &lt;Application.Resources> &lt;sys:String x:Key="StringToDisplay">Hello World!&lt;/sys:String> &lt;/Application.Resources> &lt;/Application>Then, in our actual control we can use that string as a static resource:</description></item><item><title>Templates</title><link>https://textbooks.cs.ksu.edu/cis400/2-desktop-development/02-element-tree/06-templates/</link><pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis400/2-desktop-development/02-element-tree/06-templates/</guid><description>Most WPF controls are themselves composed of multiple, simpler, controls. For example, a &lt;Button> is composed of a &lt;Border> and whatever content you place inside the button. A simplified version of this structure appears below (I removed the styling information and the VisualState components responsible for presenting the button differently when it is enabled, disabled, hovered on, or clicked):
&lt;Border TextBlock.Foreground="{TemplateBinding Foreground}" x:Name="Border" CornerRadius="2" BorderThickness="1"> &lt;Border.BorderBrush> &lt;LinearGradientBrush StartPoint="0,0" EndPoint="0,1"> &lt;LinearGradientBrush.GradientStops> &lt;GradientStopCollection> &lt;GradientStop Color="{DynamicResource BorderLightColor}" Offset="0.</description></item><item><title>Summary</title><link>https://textbooks.cs.ksu.edu/cis400/2-desktop-development/02-element-tree/07-summary/</link><pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis400/2-desktop-development/02-element-tree/07-summary/</guid><description>In this chapter, we saw how WPF applications are organized into a tree of controls. Moreover, we discussed how WPF uses this tree to perform its layout and rendering calculations. We also saw how we can traverse this tree in our programs to find parent or child elements of a specific type.
In addition, we saw how declaring resources at a specific point in the tree makes them available to all elements descended from that node.</description></item></channel></rss>