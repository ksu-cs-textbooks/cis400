




	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows Presentation Foundation on K-State CIS 400 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/01-wpf/index.html</link>
    <description>Recent content in Windows Presentation Foundation on K-State CIS 400 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Aug 2018 10:53:05 -0500</lastBuildDate><atom:link href="https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/01-wpf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/01-wpf/01-introduction/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/01-wpf/01-introduction/index.html</guid>
      <description>Windows Presentation Foundation (WPF) is a open-source system for rendering Windows application user interfaces. It was released as part of the .NET framework in 2006. In many ways, it is intended to be a successor to Windows Forms. This chapter will examine the basics of working with WPF in detail.
Key Terms Some key terms to learn in this chapter are:
Graphical User Interface (GUI) Windows Presentation Foundation (WPF) Extensible Application Markup Language (XAML) Codebehind Layouts Controls Component-Based Design Composition Key Skills The key skill to learn in this chapter is how to use C# and XAML to develop WPF user interfaces that adapt to device screen dimensions.</description>
    </item>
    <item>
      <title>WPF Features</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/01-wpf/02-wpf-features/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/01-wpf/02-wpf-features/index.html</guid>
      <description>Windows Presentation Foundation is a library and toolkit for creating Graphical User Interfaces - a user interface that is presented as a combination of interactive graphical and text elements commonly including buttons, menus, and various flavors of editors and inputs. GUIs represent a major step forward in usability from earlier programs that were interacted with by typing commands into a text-based terminal (the EPIC software we looked at in the beginning of this textbook is an example of this earlier form of user interface).</description>
    </item>
    <item>
      <title>XAML</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/01-wpf/03-xaml/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/01-wpf/03-xaml/index.html</guid>
      <description>Windows Presentation Foundation builds upon Extensible Application Markup Language (XAML), an extension of the XML language we&amp;rsquo;ve discussed previously. Just like XML, it consists of elements defined by opening and closing tags.
For example, a button is represented by:
&amp;lt;Button&amp;gt;&amp;lt;/Button&amp;gt;Which, because it has no children, could also be expressed with a self-closing tag:
&amp;lt;Button/&amp;gt;In addition, elements can have attributes, i.e we could add a height, width, and content to our button:</description>
    </item>
    <item>
      <title>Layouts</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/01-wpf/04-layouts/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/01-wpf/04-layouts/index.html</guid>
      <description>Windows Presentation Foundation provides a number of container elements that fulfill the specialized purpose of layouts. Unlike most WPF controls, they can have multiple children, which they organize on-screen. And unlike Windows Forms, these layouts adjust to the available space.
Let&amp;rsquo;s examine each of five layouts in turn:
The Grid The default layout is the Grid , which lays out its children elements in a grid pattern. A &amp;lt;Grid&amp;gt; is composed of columns and rows, the number and characteristics of which are defined by the grid&amp;rsquo;s ColumnDefinitions and RowDefinitions properties.</description>
    </item>
    <item>
      <title>Controls</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/01-wpf/05-controls/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/01-wpf/05-controls/index.html</guid>
      <description>In addition to the layout controls, WPF provides a number of useful (and often familiar) controls that we can use to compose our applications. Let&amp;rsquo;s take a look at some of the most commonly used.
Border A Border is a control that draws a border around its contents. The properties specific to a border include BorderBrush (which sets the color of the border, see the discussion of brushes on the next page), BorderThickness the number of units thick the border should be drawn, CornerRadius, which adds rounded corners, and Padding which adds space between the border and its contents.</description>
    </item>
    <item>
      <title>Control Properties</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/01-wpf/06-control-properties/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/01-wpf/06-control-properties/index.html</guid>
      <description>All WPF controls (including the layout controls we&amp;rsquo;ve already seen) derive from common base classes, i.e. UIElement and FrameworkElement , which means they all inherit common properties. Some of the most commonly used are described here.
Size &amp;amp; Placement Modifying Properties Perhaps the most important of the control properties are those that control sizing and placement. Let&amp;rsquo;s take a look at the most important of these.
Size WPF controls use three properties to determine the height of the element.</description>
    </item>
    <item>
      <title>Editing WPF Controls</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/01-wpf/07-editing/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/01-wpf/07-editing/index.html</guid>
      <description>To create a new WPF control from within Visual Studio, we usually choose &amp;ldquo;Add &amp;gt; User Control (WPF&amp;hellip;)&amp;rdquo; from the solution context menu.
This creates two files, the [filename].xaml:
&amp;lt;UserControl x:Class=&amp;#34;WpfApp1.UserControl1&amp;#34; xmlns=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34; xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34; xmlns:mc=&amp;#34;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;#34; xmlns:d=&amp;#34;http://schemas.microsoft.com/expression/blend/2008&amp;#34; xmlns:local=&amp;#34;clr-namespace:WpfApp1&amp;#34; mc:Ignorable=&amp;#34;d&amp;#34; d:DesignHeight=&amp;#34;100&amp;#34; d:DesignWidth=&amp;#34;400&amp;#34;&amp;gt; &amp;lt;Grid&amp;gt; &amp;lt;/Grid&amp;gt; &amp;lt;/UserControl&amp;gt;and the codebehind for that XAML file, [filename].xaml.cs (where [filename] is the name you supplied):
using System; using System.Collections.Generic; using System.Collections.ObjectModel; using System.Text; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.</description>
    </item>
    <item>
      <title>Component-Based Design</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/01-wpf/08-component-based-design/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/01-wpf/08-component-based-design/index.html</guid>
      <description>WPF and XAML lend themselves to a design approach known as Component-Based Design or Component-Based Development, which rather than focusing on developing the entire GUI in one go, focuses on decomposing user experiences (UX) into individual, focused, and potentially reusable components. These can, in turn, be used to build larger components, and eventually, the entire GUI[^Jayati2019].
Let&amp;rsquo;s dig deeper by focusing on a specific example. Let&amp;rsquo;s say we want to build an application for keeping track of multiple shopping lists.</description>
    </item>
    <item>
      <title>Summary</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/01-wpf/09-summary/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/2-desktop-development/01-wpf/09-summary/index.html</guid>
      <description>In this chapter, we introduced a new desktop application programming framework - Windows Presentation Foundation (WPF). We explored how WPF uses XAML to define partial classes, allowing for a graphical design editor with regular C# codebehind. We explored XAML syntax and many of the controls found in WPF. We also compared WPF with Windows Forms, which you have previously explored in prior classes. Finally, we discussed an approach to developing GUIs, Component-Based Design, which applies the Single Responsibility Principle to controls, and builds more complex controls through composition of these simpler controls.</description>
    </item>
  </channel>
</rss>