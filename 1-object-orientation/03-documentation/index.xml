<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Documentation :: K-State CIS 400 Textbook</title><link>https://textbooks.cs.ksu.edu/cis400/1-object-orientation/03-documentation/</link><description>Coding for Humans</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 09 Aug 2022 15:47:29 -0500</lastBuildDate><atom:link href="https://textbooks.cs.ksu.edu/cis400/1-object-orientation/03-documentation/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://textbooks.cs.ksu.edu/cis400/1-object-orientation/03-documentation/01-introduction/</link><pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis400/1-object-orientation/03-documentation/01-introduction/</guid><description>As part of the strategy for tackling the challenges of the software crisis, good programming practice came to include writing clear documentation to support both the end-users who will utilize your programs, as well as other programmers (and yourself) in understanding what that code is doing so that it is easy to maintain and improve.
Key Terms Some key terms to learn in this chapter are:
User documentation Developer documentation Markdown XML Autodoc tools Intellisense Key Skills The key skill to learn in this chapter is how to use C# XML code comments to document the C# code you write.</description></item><item><title>Documentation</title><link>https://textbooks.cs.ksu.edu/cis400/1-object-orientation/03-documentation/02-documentation/</link><pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis400/1-object-orientation/03-documentation/02-documentation/</guid><description>Documentation refers to the written materials that accompany program code. Documentation plays multiple, and often critical roles. Broadly speaking, we split documentation into two categories based on the intended audience:
User Documentation is meant for the end-users of the software Developer Documentation is meant for the developers of the software As you might expect, the goals for these two styles of documentation are very different. User documentation instructs the user on how to use the software.</description></item><item><title>Documentation Formats</title><link>https://textbooks.cs.ksu.edu/cis400/1-object-orientation/03-documentation/03-formats/</link><pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis400/1-object-orientation/03-documentation/03-formats/</guid><description>Developer documentation often faces a challenge not present in other kinds of documents - the need to be able to display snippets of code. Ideally, we want code to be formatted in a way that preserves indentation. We also don’t want code snippets to be subject to spelling- and grammar-checks, especially auto-correct versions of these algorithms, as they will alter the snippets. Ideally, we might also apply syntax highlighting to these snippets.</description></item><item><title>Autodocs</title><link>https://textbooks.cs.ksu.edu/cis400/1-object-orientation/03-documentation/04-autodocs/</link><pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis400/1-object-orientation/03-documentation/04-autodocs/</guid><description>One of the biggest innovations in documenting software was the development of autodocumentation tools. These were programs that would read source code files, and combine information parsed from the code itself and information contained in code comments to generate documentation in an easy-to-distribute form (often HTML). One of the earliest examples of this approach came from the programming language Java, whose API specification was generated from the language source files using JavaDoc.</description></item><item><title>Summary</title><link>https://textbooks.cs.ksu.edu/cis400/1-object-orientation/03-documentation/05-summary/</link><pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis400/1-object-orientation/03-documentation/05-summary/</guid><description>In this chapter, we examined the need for software documentation aimed at both end-users and developers (user documentation and developer documentation respectively). We also examined some formats this documentation can be presented in: HTML, Markdown, and XML. We also discussed autodocumentation tools, which generate developer documentation from specially-formatted comments in our code files.
We examined the C# approach to autodocumentation, using Microsoft’s XML code comments formatting strategy. We explored how this data is used by Visual Studio to power its Intellisense features, and provide useful information to programmers as they work with constructs like classes, properties, and methods.</description></item></channel></rss>