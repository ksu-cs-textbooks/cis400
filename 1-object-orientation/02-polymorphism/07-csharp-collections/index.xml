<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C# Collections :: K-State CIS 400 Textbook</title><link>https://textbooks.cs.ksu.edu/cis400/1-object-orientation/02-polymorphism/07-csharp-collections/</link><description>Collections in C# are a great example of polymorphism in action. Many collections utilize generics to allow the collection to hold an arbitrary type. For example, the List&lt;T> can be used to hold strings, integers, or even specific objects:
List&lt;string> strings = new List&lt;string>(); List&lt;int> ints = new List&lt;int>(); List&lt;Person> persons = new List&lt;Person>();We can also use an interface as the type, as we did with the IJumpable interface as we discussed in the generics section, i.</description><generator>Hugo</generator><language>en-us</language><lastBuildDate/><atom:link href="https://textbooks.cs.ksu.edu/cis400/1-object-orientation/02-polymorphism/07-csharp-collections/index.xml" rel="self" type="application/rss+xml"/></channel></rss>