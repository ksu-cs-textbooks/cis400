<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Generics :: K-State CIS 400 Textbook</title><link>https://textbooks.cs.ksu.edu/cis400/1-object-orientation/06-advanced-csharp/05-generics/</link><description>Generics expand the type system of C# by allowing classes and structs to be defined with a generic type parameter, which will be instantiated when it is used in code. This avoids the necessity of writing similar specialized classes that each work with a different data type. Youâ€™ve used examples of this extensively in your CIS 300 - Data Structures course.
For example, the generic List&lt;T> can be used to create a list of any type.</description><generator>Hugo</generator><language>en-us</language><lastBuildDate/><atom:link href="https://textbooks.cs.ksu.edu/cis400/1-object-orientation/06-advanced-csharp/05-generics/index.xml" rel="self" type="application/rss+xml"/></channel></rss>