<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Operator Overloading :: K-State CIS 400 Textbook</title><link>https://textbooks.cs.ksu.edu/cis400/1-object-orientation/06-advanced-csharp/04-operators/</link><description>C# allows you to override most of the languageâ€™s operators to provide class-specific functionality. The user-defined casts we discussed earlier are one example of this.
Perhaps the most obvious of these are the arithmetic operators, i.e. +, -, \, *. Consider our Vector3 class we defined earlier. If we wanted to overload the + operator to allow for vector addition, we could add it to the class definition:
/// &lt;summary> /// A class representing a 3-element vector /// &lt;/summary> public class Vector3 { /// &lt;summary>The x-coordinate&lt;/summary> public double X { get; set;} /// &lt;summary>The y-coordinate&lt;/summary> public double Y { get; set;} /// &lt;summary>The z-coordinate&lt;/summary> public double Z { get; set;} /// &lt;summary> /// Constructs a new vector /// &lt;/summary> public Vector3(double x, double y, double z) { X = x; Y = y; Z = z; } /// Adds two vectors using vector addition public static Vector3 operator +(Vector3 v1, Vector3 v2) { return new Vector3(v1.</description><generator>Hugo</generator><language>en-us</language><lastBuildDate/><atom:link href="https://textbooks.cs.ksu.edu/cis400/1-object-orientation/06-advanced-csharp/04-operators/index.xml" rel="self" type="application/rss+xml"/></channel></rss>