




	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		

	
	
		

	
	
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ASP.NET on K-State CIS 400 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cis400/3-web-development/02-aspdotnet/index.html</link>
    <description>Recent content in ASP.NET on K-State CIS 400 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Aug 2018 10:53:05 -0500</lastBuildDate><atom:link href="https://ksu-cs-textbooks.github.io/cis400/3-web-development/02-aspdotnet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/3-web-development/02-aspdotnet/01-introduction/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/3-web-development/02-aspdotnet/01-introduction/index.html</guid>
      <description>While web browsers request resources (including HTTP, CSS, and JavaScript) files over HTTP, the other end of this connection, and what supplies those files, is a web server. Unlike web clients, which are limited by what technologies a browser understands (namely HTML, CSS, and JS), a web server can be written in any programming language. In this chapter, we will explore writing web servers in C#, using aspects of the ASP.</description>
    </item>
    <item>
      <title>Static Webservers</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/3-web-development/02-aspdotnet/02-static-webservers/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/3-web-development/02-aspdotnet/02-static-webservers/index.html</guid>
      <description>The earliest web servers simply served files held in a directory. If you think back to your web development assignment from CIS 115, this is exactly what you did - you created some HTML, CSS, and JS files and placed them in the public_html directory in your user directory on the CS Linux server. Anything placed in this folder is automatically served by an instance of the Apache web server running on the Linux server, at the address https://people.</description>
    </item>
    <item>
      <title>Dynamic Pages</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/3-web-development/02-aspdotnet/03-dynamic-pages/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/3-web-development/02-aspdotnet/03-dynamic-pages/index.html</guid>
      <description>Modern websites are more often full-fledged applications than collections of static files. But these applications remain built upon the foundations of the core web technologies of HTML, CSS, and JavaScript. In fact, the client-side application is typically built of exactly these three kinds of files! So how can we create a dynamic web application?
One of the earliest approaches was to write a program to dynamically create the HTML file that was being served.</description>
    </item>
    <item>
      <title>Template Rendering</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/3-web-development/02-aspdotnet/04-template-rendering/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:05 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/3-web-development/02-aspdotnet/04-template-rendering/index.html</guid>
      <description>It was not long before new technologies sprang up to replace the ad-hoc string concatenation approach to creating dynamic pages. These template approaches allow you to write a page using primarily HTML, but embed snippets of another language to execute and concatenate into the final page. This is very similar to the template strings we have used in C#, i.e.:
string time = $&amp;#34;The time is {DateTime.Now}&amp;#34;;Which concatenates the invoking the DateTime.</description>
    </item>
    <item>
      <title>Web Frameworks</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/3-web-development/02-aspdotnet/05-web-frameworks/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:05 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/3-web-development/02-aspdotnet/05-web-frameworks/index.html</guid>
      <description>As web sites became web applications, developers began looking to use ideas and techniques drawn from traditional software development. These included architectural patterns like Model-View-Controller (MVC) and Pipeline that simply were not possible with the server page model. The result was the development of a host of web frameworks across multiple programming languages, including:
Ruby on Rails , which uses the Ruby programming language and adopts a MVC architecture Laravel , which uses the PHP programming language and adopts a MVC architecture Django , which uses the Python programming language and adopts a MVC architecture Express , which uses the Node implementation of the JavaScript programming language and adopts the Pipeline architecture Revel , which uses the Go programming language and adopts a Pipeline architecture Cowboy , which uses the erlang programming language and adopts a Pipeline architecture Phoenix , which uses the elixir programming language, and adopts a Pipeline architecture ASP.</description>
    </item>
    <item>
      <title>Razor Pages</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/3-web-development/02-aspdotnet/06-razor-pages/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:05 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/3-web-development/02-aspdotnet/06-razor-pages/index.html</guid>
      <description>ASP.NET Core adds a project type to Visual Studio&amp;rsquo;s new project wizard, ASP.NET Core web application which uses Razor Pages. The Razor Page approach represents a hybrid approach between a MVC and Pipeline architecture and leverages some of the ideas of component-based design that we saw with WPF applications.
The program entry point is Program.cs, which creates the web server our application will run on. In it, we initialize and configure the server based on the Startup.</description>
    </item>
    <item>
      <title>Summary</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/3-web-development/02-aspdotnet/07-summary/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:05 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/3-web-development/02-aspdotnet/07-summary/index.html</guid>
      <description>In this chapter we explored how server-side web technologies have evolved to create dynamic web sites and web applications. The ASP.NET Core platform is Microsoft&amp;rsquo;s answer to this evolution. It can run on either Microsoft&amp;rsquo;s flagship IIS server, or as a stand-alone server on a variety of platforms. It brings together a suite of technologies to build web pages and web applications. We took an in-depth look at one of these - Razor pages, and learned how to build our own Razor pages app.</description>
    </item>
  </channel>
</rss>