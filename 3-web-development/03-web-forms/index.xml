




	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Form Data on K-State CIS 400 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cis400/3-web-development/03-web-forms/index.html</link>
    <description>Recent content in Form Data on K-State CIS 400 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Aug 2018 10:53:05 -0500</lastBuildDate><atom:link href="https://ksu-cs-textbooks.github.io/cis400/3-web-development/03-web-forms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/3-web-development/03-web-forms/01-introduction/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/3-web-development/03-web-forms/01-introduction/index.html</guid>
      <description>Now that we have explored some ideas about getting data from the web server, let&amp;rsquo;s turn our attention to sending data to the webserver. One of the earliest approaches for doing so is to use a HTML form sent as a HTTP Request, which we&amp;rsquo;ll take a look at in this chapter.
Key Terms Some key terms to learn in this chapter are:
Form Input Encoding Nullable&amp;lt;T&amp;gt; and ? And the HTML tags:</description>
    </item>
    <item>
      <title>HTTP Forms</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/3-web-development/03-web-forms/02-http-forms/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:05 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/3-web-development/03-web-forms/02-http-forms/index.html</guid>
      <description>One of the earliest (and still widely used) mechanisms for transferring data from a browser (client) to the server is a form. The &amp;lt;form&amp;gt; is a specific HTML element that contains input fields and buttons the user can interact with.
The &amp;lt;input&amp;gt; Element Perhaps the most important - and versatile - of these is the &amp;lt;input&amp;gt; element. By setting its type attribute, we can represent a wide range of possible inputs, as is demonstrated by this table taken from the MDN Web Docs :</description>
    </item>
    <item>
      <title>Form Data</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/3-web-development/03-web-forms/03-form-data/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/3-web-development/03-web-forms/03-form-data/index.html</guid>
      <description>Form data is simply serialized key/value pairs pulled from a form and encoded using one of the three possible encoding strategies, and submitted using the specified method (usually GET or POST).
So when we submit a form containing two text inputs for first and last name:
&amp;lt;form method=&amp;#34;post&amp;#34;&amp;gt; &amp;lt;label for=&amp;#34;First&amp;#34;&amp;gt;First Name:&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;First&amp;#34;/&amp;gt; &amp;lt;label for=&amp;#34;Last&amp;#34;&amp;gt;Last Name:&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;Last&amp;#34;/&amp;gt; &amp;lt;input type=&amp;#34;Submit&amp;#34; value=&amp;#34;Save Name&amp;#34;/&amp;gt; &amp;lt;/form&amp;gt;And enter the values &amp;ldquo;Frank&amp;rdquo; and &amp;ldquo;Jones&amp;rdquo;, the form is serialized as the key-value pairs:</description>
    </item>
    <item>
      <title>Razor Pages and Form Data</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/3-web-development/03-web-forms/04-forms-and-razor-pages/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/3-web-development/03-web-forms/04-forms-and-razor-pages/index.html</guid>
      <description>While C# does provide utilities for parsing URL-encoded strings, the functionality of parsing incoming form data is built into the ASP.NET response handling. Thus, when writing a Razor page application, we don&amp;rsquo;t need to perform decoding on the form data - it has already been done for us. There are several strategies built into Razor Pages to access this information:
The Request Object The first of these is the HttpRequest object, which is available as the Request property within a Page.</description>
    </item>
    <item>
      <title>Validation</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/3-web-development/03-web-forms/05-validation/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/3-web-development/03-web-forms/05-validation/index.html</guid>
      <description>Validation refers to the process of making sure the submitted data matches our expectations. Validation can be done client-side or server-side. For example, we can use the built-in HTML form validation properties to enforce rules, like a number that must be positive:
&amp;lt;input type=&amp;#34;number&amp;#34; min=&amp;#34;0&amp;#34; name=&amp;#34;Age&amp;#34; required&amp;gt;If a user attempts to submit a form containing this input, and the value is less than 0, the browser will display an error message instead of submitting.</description>
    </item>
    <item>
      <title>Summary</title>
      <link>https://ksu-cs-textbooks.github.io/cis400/3-web-development/03-web-forms/06-summary/index.html</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis400/3-web-development/03-web-forms/06-summary/index.html</guid>
      <description>In this chapter we looked at how data is handled in web applications. We saw how forms can be used to submit data to our server, and examined several common encoding strategies. We also saw how we can retrieve this data in our Razor Pages - through the Request object, or by parameter or model binding. Finally, we discussed validating submitted values, on both the client and server side of a HTTP request.</description>
    </item>
  </channel>
</rss>